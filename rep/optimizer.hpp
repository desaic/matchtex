#ifndef OPTIMIZER_HPP
#define OPTIMIZER_HPP

#include <vector>
#include <math.h>
#include <stdlib.h>
#include <cstdlib>

#define dprintf(S, ...) fprintf(stderr, S, __VA_ARGS__);

using namespace std;

namespace Fab {
  ///@brief Vertex can be extended
  ///float vertex positions for now.
  ///template later
  ///useful for passing data around, not useful for computation
  struct Vertex{
    float position[3];
  };
  ///@brief Triangle can also be extended
  struct Triangle{
    unsigned int vertex[3];
  };

  ///@brief a 3D model to operate on. Can be a precise shape or
  ///a rough sketch
  class Shape{
  public:
    Vertex * vertex;
    Triangle * triangle;
    unsigned int nVertex, nTriangle;
    Shape():vertex(0),triangle(0),nVertex(0),nTriangle(0){}
  };
  ///@brief specification of desired behavior of model
  class Goal{
  };
  ///@brief external forces, lighting etc. applied to the model
  class Scene{
  };
  ///@brief the final output of the entire pipeline. Often a fablet.
  class Output{
  };
  ///@brief states generated by the generator and used by the optimizer
  class State{
  };
  ///@brief the optimizer finds the optimal state in the state space
  class Optimizer {
	public:
    virtual State * getState()=0;
    virtual void setState(State * state)=0;
    virtual void run()=0;
	};

}
#endif
